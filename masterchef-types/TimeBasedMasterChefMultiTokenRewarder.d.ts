/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface TimeBasedMasterChefMultiTokenRewarderInterface extends ethers.utils.Interface {
    functions: {
        'add(uint256,uint256)': FunctionFragment;
        'allocationPointsPerPool(uint256)': FunctionFragment;
        'getRewardTokenConfigs()': FunctionFragment;
        'getRewardTokens()': FunctionFragment;
        'initializeRewardTokens(address[])': FunctionFragment;
        'massUpdatePools(uint256[])': FunctionFragment;
        'masterChef()': FunctionFragment;
        'masterchefPoolIds(uint256)': FunctionFragment;
        'onBeetsReward(uint256,address,address,uint256,uint256)': FunctionFragment;
        'owner()': FunctionFragment;
        'pendingTokens(uint256,address,uint256)': FunctionFragment;
        'poolLength()': FunctionFragment;
        'renounceOwnership()': FunctionFragment;
        'rewardTokenConfigs(uint256)': FunctionFragment;
        'set(uint256,uint256)': FunctionFragment;
        'setRewardPerSecond(address[],uint256[])': FunctionFragment;
        'shutDown(address)': FunctionFragment;
        'tokenRewardInfos(uint256,address)': FunctionFragment;
        'transferOwnership(address)': FunctionFragment;
        'updatePool(uint256)': FunctionFragment;
        'userInfos(uint256,address,address)': FunctionFragment;
    };

    encodeFunctionData(functionFragment: 'add', values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'allocationPointsPerPool', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'getRewardTokenConfigs', values?: undefined): string;
    encodeFunctionData(functionFragment: 'getRewardTokens', values?: undefined): string;
    encodeFunctionData(functionFragment: 'initializeRewardTokens', values: [string[]]): string;
    encodeFunctionData(functionFragment: 'massUpdatePools', values: [BigNumberish[]]): string;
    encodeFunctionData(functionFragment: 'masterChef', values?: undefined): string;
    encodeFunctionData(functionFragment: 'masterchefPoolIds', values: [BigNumberish]): string;
    encodeFunctionData(
        functionFragment: 'onBeetsReward',
        values: [BigNumberish, string, string, BigNumberish, BigNumberish],
    ): string;
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
    encodeFunctionData(functionFragment: 'pendingTokens', values: [BigNumberish, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'poolLength', values?: undefined): string;
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
    encodeFunctionData(functionFragment: 'rewardTokenConfigs', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'set', values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: 'setRewardPerSecond', values: [string[], BigNumberish[]]): string;
    encodeFunctionData(functionFragment: 'shutDown', values: [string]): string;
    encodeFunctionData(functionFragment: 'tokenRewardInfos', values: [BigNumberish, string]): string;
    encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
    encodeFunctionData(functionFragment: 'updatePool', values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: 'userInfos', values: [BigNumberish, string, string]): string;

    decodeFunctionResult(functionFragment: 'add', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'allocationPointsPerPool', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getRewardTokenConfigs', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'getRewardTokens', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'initializeRewardTokens', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'massUpdatePools', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'masterChef', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'masterchefPoolIds', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'onBeetsReward', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'pendingTokens', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'poolLength', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'rewardTokenConfigs', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'set', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'setRewardPerSecond', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'shutDown', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'tokenRewardInfos', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'updatePool', data: BytesLike): Result;
    decodeFunctionResult(functionFragment: 'userInfos', data: BytesLike): Result;

    events: {
        'LogInit()': EventFragment;
        'LogInitRewardTokens(address[],uint256[])': EventFragment;
        'LogOnReward(address,uint256,address,uint256,address)': EventFragment;
        'LogPoolAddition(uint256,uint256)': EventFragment;
        'LogRewardsPerSecond(address[],uint256[])': EventFragment;
        'LogSetPool(uint256,uint256)': EventFragment;
        'LogUpdatePool(uint256,address,uint256,uint256,uint256)': EventFragment;
        'OwnershipTransferred(address,address)': EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: 'LogInit'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'LogInitRewardTokens'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'LogOnReward'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'LogPoolAddition'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'LogRewardsPerSecond'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'LogSetPool'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'LogUpdatePool'): EventFragment;
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export class TimeBasedMasterChefMultiTokenRewarder extends Contract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    on(event: EventFilter | string, listener: Listener): this;
    once(event: EventFilter | string, listener: Listener): this;
    addListener(eventName: EventFilter | string, listener: Listener): this;
    removeAllListeners(eventName: EventFilter | string): this;
    removeListener(eventName: any, listener: Listener): this;

    interface: TimeBasedMasterChefMultiTokenRewarderInterface;

    functions: {
        add(pid: BigNumberish, allocationPoints: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

        'add(uint256,uint256)'(
            pid: BigNumberish,
            allocationPoints: BigNumberish,
            overrides?: Overrides,
        ): Promise<ContractTransaction>;

        allocationPointsPerPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

        'allocationPointsPerPool(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

        getRewardTokenConfigs(overrides?: CallOverrides): Promise<
            [
                ([string, BigNumber, BigNumber] & {
                    rewardToken: string;
                    rewardsPerSecond: BigNumber;
                    accTokenPrecision: BigNumber;
                })[],
            ] & {
                configs: ([string, BigNumber, BigNumber] & {
                    rewardToken: string;
                    rewardsPerSecond: BigNumber;
                    accTokenPrecision: BigNumber;
                })[];
            }
        >;

        'getRewardTokenConfigs()'(overrides?: CallOverrides): Promise<
            [
                ([string, BigNumber, BigNumber] & {
                    rewardToken: string;
                    rewardsPerSecond: BigNumber;
                    accTokenPrecision: BigNumber;
                })[],
            ] & {
                configs: ([string, BigNumber, BigNumber] & {
                    rewardToken: string;
                    rewardsPerSecond: BigNumber;
                    accTokenPrecision: BigNumber;
                })[];
            }
        >;

        getRewardTokens(overrides?: CallOverrides): Promise<[string[]] & { tokens: string[] }>;

        'getRewardTokens()'(overrides?: CallOverrides): Promise<[string[]] & { tokens: string[] }>;

        initializeRewardTokens(tokens: string[], overrides?: Overrides): Promise<ContractTransaction>;

        'initializeRewardTokens(address[])'(tokens: string[], overrides?: Overrides): Promise<ContractTransaction>;

        massUpdatePools(pids: BigNumberish[], overrides?: Overrides): Promise<ContractTransaction>;

        'massUpdatePools(uint256[])'(pids: BigNumberish[], overrides?: Overrides): Promise<ContractTransaction>;

        masterChef(overrides?: CallOverrides): Promise<[string]>;

        'masterChef()'(overrides?: CallOverrides): Promise<[string]>;

        masterchefPoolIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

        'masterchefPoolIds(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

        onBeetsReward(
            pid: BigNumberish,
            userAddress: string,
            recipient: string,
            arg3: BigNumberish,
            newLpAmount: BigNumberish,
            overrides?: Overrides,
        ): Promise<ContractTransaction>;

        'onBeetsReward(uint256,address,address,uint256,uint256)'(
            pid: BigNumberish,
            userAddress: string,
            recipient: string,
            arg3: BigNumberish,
            newLpAmount: BigNumberish,
            overrides?: Overrides,
        ): Promise<ContractTransaction>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        'owner()'(overrides?: CallOverrides): Promise<[string]>;

        pendingTokens(
            pid: BigNumberish,
            userAddress: string,
            arg2: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[string[], BigNumber[]] & { tokens: string[]; rewardAmounts: BigNumber[] }>;

        'pendingTokens(uint256,address,uint256)'(
            pid: BigNumberish,
            userAddress: string,
            arg2: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[string[], BigNumber[]] & { tokens: string[]; rewardAmounts: BigNumber[] }>;

        poolLength(overrides?: CallOverrides): Promise<[BigNumber] & { pools: BigNumber }>;

        'poolLength()'(overrides?: CallOverrides): Promise<[BigNumber] & { pools: BigNumber }>;

        renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

        'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>;

        rewardTokenConfigs(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            [string, BigNumber, BigNumber] & {
                rewardToken: string;
                rewardsPerSecond: BigNumber;
                accTokenPrecision: BigNumber;
            }
        >;

        'rewardTokenConfigs(uint256)'(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            [string, BigNumber, BigNumber] & {
                rewardToken: string;
                rewardsPerSecond: BigNumber;
                accTokenPrecision: BigNumber;
            }
        >;

        set(pid: BigNumberish, allocationPoints: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

        'set(uint256,uint256)'(
            pid: BigNumberish,
            allocationPoints: BigNumberish,
            overrides?: Overrides,
        ): Promise<ContractTransaction>;

        setRewardPerSecond(
            _tokens: string[],
            _rewardsPerSecond: BigNumberish[],
            overrides?: Overrides,
        ): Promise<ContractTransaction>;

        'setRewardPerSecond(address[],uint256[])'(
            _tokens: string[],
            _rewardsPerSecond: BigNumberish[],
            overrides?: Overrides,
        ): Promise<ContractTransaction>;

        shutDown(withdrawRemainingFundsTo: string, overrides?: Overrides): Promise<ContractTransaction>;

        'shutDown(address)'(withdrawRemainingFundsTo: string, overrides?: Overrides): Promise<ContractTransaction>;

        tokenRewardInfos(
            arg0: BigNumberish,
            arg1: string,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber] & {
                accRewardTokenPerShare: BigNumber;
                lastRewardTime: BigNumber;
            }
        >;

        'tokenRewardInfos(uint256,address)'(
            arg0: BigNumberish,
            arg1: string,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber] & {
                accRewardTokenPerShare: BigNumber;
                lastRewardTime: BigNumber;
            }
        >;

        transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

        'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

        updatePool(pid: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

        'updatePool(uint256)'(pid: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

        userInfos(
            arg0: BigNumberish,
            arg1: string,
            arg2: string,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;

        'userInfos(uint256,address,address)'(
            arg0: BigNumberish,
            arg1: string,
            arg2: string,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;
    };

    add(pid: BigNumberish, allocationPoints: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    'add(uint256,uint256)'(
        pid: BigNumberish,
        allocationPoints: BigNumberish,
        overrides?: Overrides,
    ): Promise<ContractTransaction>;

    allocationPointsPerPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'allocationPointsPerPool(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokenConfigs(overrides?: CallOverrides): Promise<
        ([string, BigNumber, BigNumber] & {
            rewardToken: string;
            rewardsPerSecond: BigNumber;
            accTokenPrecision: BigNumber;
        })[]
    >;

    'getRewardTokenConfigs()'(overrides?: CallOverrides): Promise<
        ([string, BigNumber, BigNumber] & {
            rewardToken: string;
            rewardsPerSecond: BigNumber;
            accTokenPrecision: BigNumber;
        })[]
    >;

    getRewardTokens(overrides?: CallOverrides): Promise<string[]>;

    'getRewardTokens()'(overrides?: CallOverrides): Promise<string[]>;

    initializeRewardTokens(tokens: string[], overrides?: Overrides): Promise<ContractTransaction>;

    'initializeRewardTokens(address[])'(tokens: string[], overrides?: Overrides): Promise<ContractTransaction>;

    massUpdatePools(pids: BigNumberish[], overrides?: Overrides): Promise<ContractTransaction>;

    'massUpdatePools(uint256[])'(pids: BigNumberish[], overrides?: Overrides): Promise<ContractTransaction>;

    masterChef(overrides?: CallOverrides): Promise<string>;

    'masterChef()'(overrides?: CallOverrides): Promise<string>;

    masterchefPoolIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'masterchefPoolIds(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    onBeetsReward(
        pid: BigNumberish,
        userAddress: string,
        recipient: string,
        arg3: BigNumberish,
        newLpAmount: BigNumberish,
        overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'onBeetsReward(uint256,address,address,uint256,uint256)'(
        pid: BigNumberish,
        userAddress: string,
        recipient: string,
        arg3: BigNumberish,
        newLpAmount: BigNumberish,
        overrides?: Overrides,
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    pendingTokens(
        pid: BigNumberish,
        userAddress: string,
        arg2: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<[string[], BigNumber[]] & { tokens: string[]; rewardAmounts: BigNumber[] }>;

    'pendingTokens(uint256,address,uint256)'(
        pid: BigNumberish,
        userAddress: string,
        arg2: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<[string[], BigNumber[]] & { tokens: string[]; rewardAmounts: BigNumber[] }>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    'poolLength()'(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    'renounceOwnership()'(overrides?: Overrides): Promise<ContractTransaction>;

    rewardTokenConfigs(
        arg0: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<
        [string, BigNumber, BigNumber] & {
            rewardToken: string;
            rewardsPerSecond: BigNumber;
            accTokenPrecision: BigNumber;
        }
    >;

    'rewardTokenConfigs(uint256)'(
        arg0: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<
        [string, BigNumber, BigNumber] & {
            rewardToken: string;
            rewardsPerSecond: BigNumber;
            accTokenPrecision: BigNumber;
        }
    >;

    set(pid: BigNumberish, allocationPoints: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    'set(uint256,uint256)'(
        pid: BigNumberish,
        allocationPoints: BigNumberish,
        overrides?: Overrides,
    ): Promise<ContractTransaction>;

    setRewardPerSecond(
        _tokens: string[],
        _rewardsPerSecond: BigNumberish[],
        overrides?: Overrides,
    ): Promise<ContractTransaction>;

    'setRewardPerSecond(address[],uint256[])'(
        _tokens: string[],
        _rewardsPerSecond: BigNumberish[],
        overrides?: Overrides,
    ): Promise<ContractTransaction>;

    shutDown(withdrawRemainingFundsTo: string, overrides?: Overrides): Promise<ContractTransaction>;

    'shutDown(address)'(withdrawRemainingFundsTo: string, overrides?: Overrides): Promise<ContractTransaction>;

    tokenRewardInfos(
        arg0: BigNumberish,
        arg1: string,
        overrides?: CallOverrides,
    ): Promise<
        [BigNumber, BigNumber] & {
            accRewardTokenPerShare: BigNumber;
            lastRewardTime: BigNumber;
        }
    >;

    'tokenRewardInfos(uint256,address)'(
        arg0: BigNumberish,
        arg1: string,
        overrides?: CallOverrides,
    ): Promise<
        [BigNumber, BigNumber] & {
            accRewardTokenPerShare: BigNumber;
            lastRewardTime: BigNumber;
        }
    >;

    transferOwnership(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

    'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<ContractTransaction>;

    updatePool(pid: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    'updatePool(uint256)'(pid: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    userInfos(
        arg0: BigNumberish,
        arg1: string,
        arg2: string,
        overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;

    'userInfos(uint256,address,address)'(
        arg0: BigNumberish,
        arg1: string,
        arg2: string,
        overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;

    callStatic: {
        add(pid: BigNumberish, allocationPoints: BigNumberish, overrides?: CallOverrides): Promise<void>;

        'add(uint256,uint256)'(
            pid: BigNumberish,
            allocationPoints: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        allocationPointsPerPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        'allocationPointsPerPool(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        getRewardTokenConfigs(overrides?: CallOverrides): Promise<
            ([string, BigNumber, BigNumber] & {
                rewardToken: string;
                rewardsPerSecond: BigNumber;
                accTokenPrecision: BigNumber;
            })[]
        >;

        'getRewardTokenConfigs()'(overrides?: CallOverrides): Promise<
            ([string, BigNumber, BigNumber] & {
                rewardToken: string;
                rewardsPerSecond: BigNumber;
                accTokenPrecision: BigNumber;
            })[]
        >;

        getRewardTokens(overrides?: CallOverrides): Promise<string[]>;

        'getRewardTokens()'(overrides?: CallOverrides): Promise<string[]>;

        initializeRewardTokens(tokens: string[], overrides?: CallOverrides): Promise<void>;

        'initializeRewardTokens(address[])'(tokens: string[], overrides?: CallOverrides): Promise<void>;

        massUpdatePools(pids: BigNumberish[], overrides?: CallOverrides): Promise<void>;

        'massUpdatePools(uint256[])'(pids: BigNumberish[], overrides?: CallOverrides): Promise<void>;

        masterChef(overrides?: CallOverrides): Promise<string>;

        'masterChef()'(overrides?: CallOverrides): Promise<string>;

        masterchefPoolIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        'masterchefPoolIds(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        onBeetsReward(
            pid: BigNumberish,
            userAddress: string,
            recipient: string,
            arg3: BigNumberish,
            newLpAmount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        'onBeetsReward(uint256,address,address,uint256,uint256)'(
            pid: BigNumberish,
            userAddress: string,
            recipient: string,
            arg3: BigNumberish,
            newLpAmount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        owner(overrides?: CallOverrides): Promise<string>;

        'owner()'(overrides?: CallOverrides): Promise<string>;

        pendingTokens(
            pid: BigNumberish,
            userAddress: string,
            arg2: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[string[], BigNumber[]] & { tokens: string[]; rewardAmounts: BigNumber[] }>;

        'pendingTokens(uint256,address,uint256)'(
            pid: BigNumberish,
            userAddress: string,
            arg2: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[string[], BigNumber[]] & { tokens: string[]; rewardAmounts: BigNumber[] }>;

        poolLength(overrides?: CallOverrides): Promise<BigNumber>;

        'poolLength()'(overrides?: CallOverrides): Promise<BigNumber>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        'renounceOwnership()'(overrides?: CallOverrides): Promise<void>;

        rewardTokenConfigs(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            [string, BigNumber, BigNumber] & {
                rewardToken: string;
                rewardsPerSecond: BigNumber;
                accTokenPrecision: BigNumber;
            }
        >;

        'rewardTokenConfigs(uint256)'(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            [string, BigNumber, BigNumber] & {
                rewardToken: string;
                rewardsPerSecond: BigNumber;
                accTokenPrecision: BigNumber;
            }
        >;

        set(pid: BigNumberish, allocationPoints: BigNumberish, overrides?: CallOverrides): Promise<void>;

        'set(uint256,uint256)'(
            pid: BigNumberish,
            allocationPoints: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        setRewardPerSecond(
            _tokens: string[],
            _rewardsPerSecond: BigNumberish[],
            overrides?: CallOverrides,
        ): Promise<void>;

        'setRewardPerSecond(address[],uint256[])'(
            _tokens: string[],
            _rewardsPerSecond: BigNumberish[],
            overrides?: CallOverrides,
        ): Promise<void>;

        shutDown(withdrawRemainingFundsTo: string, overrides?: CallOverrides): Promise<void>;

        'shutDown(address)'(withdrawRemainingFundsTo: string, overrides?: CallOverrides): Promise<void>;

        tokenRewardInfos(
            arg0: BigNumberish,
            arg1: string,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber] & {
                accRewardTokenPerShare: BigNumber;
                lastRewardTime: BigNumber;
            }
        >;

        'tokenRewardInfos(uint256,address)'(
            arg0: BigNumberish,
            arg1: string,
            overrides?: CallOverrides,
        ): Promise<
            [BigNumber, BigNumber] & {
                accRewardTokenPerShare: BigNumber;
                lastRewardTime: BigNumber;
            }
        >;

        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

        'transferOwnership(address)'(newOwner: string, overrides?: CallOverrides): Promise<void>;

        updatePool(
            pid: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            ([BigNumber, BigNumber] & {
                accRewardTokenPerShare: BigNumber;
                lastRewardTime: BigNumber;
            })[]
        >;

        'updatePool(uint256)'(
            pid: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<
            ([BigNumber, BigNumber] & {
                accRewardTokenPerShare: BigNumber;
                lastRewardTime: BigNumber;
            })[]
        >;

        userInfos(
            arg0: BigNumberish,
            arg1: string,
            arg2: string,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;

        'userInfos(uint256,address,address)'(
            arg0: BigNumberish,
            arg1: string,
            arg2: string,
            overrides?: CallOverrides,
        ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }>;
    };

    filters: {
        LogInit(): EventFilter;

        LogInitRewardTokens(rewardTokens: null, accTokenPrecisions: null): EventFilter;

        LogOnReward(
            user: string | null,
            pid: BigNumberish | null,
            rewardToken: null,
            amount: null,
            to: string | null,
        ): EventFilter;

        LogPoolAddition(pid: BigNumberish | null, allocPoint: null): EventFilter;

        LogRewardsPerSecond(rewardTokens: null, rewardsPerSecond: null): EventFilter;

        LogSetPool(pid: BigNumberish | null, allocPoint: null): EventFilter;

        LogUpdatePool(
            pid: BigNumberish | null,
            rewardToken: string | null,
            lastRewardTime: null,
            lpSupply: null,
            accRewardTokenPerShare: null,
        ): EventFilter;

        OwnershipTransferred(previousOwner: string | null, newOwner: string | null): EventFilter;
    };

    estimateGas: {
        add(pid: BigNumberish, allocationPoints: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

        'add(uint256,uint256)'(
            pid: BigNumberish,
            allocationPoints: BigNumberish,
            overrides?: Overrides,
        ): Promise<BigNumber>;

        allocationPointsPerPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        'allocationPointsPerPool(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        getRewardTokenConfigs(overrides?: CallOverrides): Promise<BigNumber>;

        'getRewardTokenConfigs()'(overrides?: CallOverrides): Promise<BigNumber>;

        getRewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

        'getRewardTokens()'(overrides?: CallOverrides): Promise<BigNumber>;

        initializeRewardTokens(tokens: string[], overrides?: Overrides): Promise<BigNumber>;

        'initializeRewardTokens(address[])'(tokens: string[], overrides?: Overrides): Promise<BigNumber>;

        massUpdatePools(pids: BigNumberish[], overrides?: Overrides): Promise<BigNumber>;

        'massUpdatePools(uint256[])'(pids: BigNumberish[], overrides?: Overrides): Promise<BigNumber>;

        masterChef(overrides?: CallOverrides): Promise<BigNumber>;

        'masterChef()'(overrides?: CallOverrides): Promise<BigNumber>;

        masterchefPoolIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        'masterchefPoolIds(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        onBeetsReward(
            pid: BigNumberish,
            userAddress: string,
            recipient: string,
            arg3: BigNumberish,
            newLpAmount: BigNumberish,
            overrides?: Overrides,
        ): Promise<BigNumber>;

        'onBeetsReward(uint256,address,address,uint256,uint256)'(
            pid: BigNumberish,
            userAddress: string,
            recipient: string,
            arg3: BigNumberish,
            newLpAmount: BigNumberish,
            overrides?: Overrides,
        ): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

        pendingTokens(
            pid: BigNumberish,
            userAddress: string,
            arg2: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        'pendingTokens(uint256,address,uint256)'(
            pid: BigNumberish,
            userAddress: string,
            arg2: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        poolLength(overrides?: CallOverrides): Promise<BigNumber>;

        'poolLength()'(overrides?: CallOverrides): Promise<BigNumber>;

        renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

        'renounceOwnership()'(overrides?: Overrides): Promise<BigNumber>;

        rewardTokenConfigs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        'rewardTokenConfigs(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

        set(pid: BigNumberish, allocationPoints: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

        'set(uint256,uint256)'(
            pid: BigNumberish,
            allocationPoints: BigNumberish,
            overrides?: Overrides,
        ): Promise<BigNumber>;

        setRewardPerSecond(
            _tokens: string[],
            _rewardsPerSecond: BigNumberish[],
            overrides?: Overrides,
        ): Promise<BigNumber>;

        'setRewardPerSecond(address[],uint256[])'(
            _tokens: string[],
            _rewardsPerSecond: BigNumberish[],
            overrides?: Overrides,
        ): Promise<BigNumber>;

        shutDown(withdrawRemainingFundsTo: string, overrides?: Overrides): Promise<BigNumber>;

        'shutDown(address)'(withdrawRemainingFundsTo: string, overrides?: Overrides): Promise<BigNumber>;

        tokenRewardInfos(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

        'tokenRewardInfos(uint256,address)'(
            arg0: BigNumberish,
            arg1: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        transferOwnership(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

        'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

        updatePool(pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

        'updatePool(uint256)'(pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

        userInfos(arg0: BigNumberish, arg1: string, arg2: string, overrides?: CallOverrides): Promise<BigNumber>;

        'userInfos(uint256,address,address)'(
            arg0: BigNumberish,
            arg1: string,
            arg2: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        add(pid: BigNumberish, allocationPoints: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

        'add(uint256,uint256)'(
            pid: BigNumberish,
            allocationPoints: BigNumberish,
            overrides?: Overrides,
        ): Promise<PopulatedTransaction>;

        allocationPointsPerPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'allocationPointsPerPool(uint256)'(
            arg0: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getRewardTokenConfigs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getRewardTokenConfigs()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getRewardTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'getRewardTokens()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        initializeRewardTokens(tokens: string[], overrides?: Overrides): Promise<PopulatedTransaction>;

        'initializeRewardTokens(address[])'(tokens: string[], overrides?: Overrides): Promise<PopulatedTransaction>;

        massUpdatePools(pids: BigNumberish[], overrides?: Overrides): Promise<PopulatedTransaction>;

        'massUpdatePools(uint256[])'(pids: BigNumberish[], overrides?: Overrides): Promise<PopulatedTransaction>;

        masterChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'masterChef()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        masterchefPoolIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'masterchefPoolIds(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        onBeetsReward(
            pid: BigNumberish,
            userAddress: string,
            recipient: string,
            arg3: BigNumberish,
            newLpAmount: BigNumberish,
            overrides?: Overrides,
        ): Promise<PopulatedTransaction>;

        'onBeetsReward(uint256,address,address,uint256,uint256)'(
            pid: BigNumberish,
            userAddress: string,
            recipient: string,
            arg3: BigNumberish,
            newLpAmount: BigNumberish,
            overrides?: Overrides,
        ): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        pendingTokens(
            pid: BigNumberish,
            userAddress: string,
            arg2: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        'pendingTokens(uint256,address,uint256)'(
            pid: BigNumberish,
            userAddress: string,
            arg2: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'poolLength()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

        'renounceOwnership()'(overrides?: Overrides): Promise<PopulatedTransaction>;

        rewardTokenConfigs(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'rewardTokenConfigs(uint256)'(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        set(pid: BigNumberish, allocationPoints: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

        'set(uint256,uint256)'(
            pid: BigNumberish,
            allocationPoints: BigNumberish,
            overrides?: Overrides,
        ): Promise<PopulatedTransaction>;

        setRewardPerSecond(
            _tokens: string[],
            _rewardsPerSecond: BigNumberish[],
            overrides?: Overrides,
        ): Promise<PopulatedTransaction>;

        'setRewardPerSecond(address[],uint256[])'(
            _tokens: string[],
            _rewardsPerSecond: BigNumberish[],
            overrides?: Overrides,
        ): Promise<PopulatedTransaction>;

        shutDown(withdrawRemainingFundsTo: string, overrides?: Overrides): Promise<PopulatedTransaction>;

        'shutDown(address)'(withdrawRemainingFundsTo: string, overrides?: Overrides): Promise<PopulatedTransaction>;

        tokenRewardInfos(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        'tokenRewardInfos(uint256,address)'(
            arg0: BigNumberish,
            arg1: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        transferOwnership(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>;

        'transferOwnership(address)'(newOwner: string, overrides?: Overrides): Promise<PopulatedTransaction>;

        updatePool(pid: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

        'updatePool(uint256)'(pid: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

        userInfos(
            arg0: BigNumberish,
            arg1: string,
            arg2: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        'userInfos(uint256,address,address)'(
            arg0: BigNumberish,
            arg1: string,
            arg2: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;
    };
}
